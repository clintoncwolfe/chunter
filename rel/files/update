#!/bin/bash
ETC=/opt/chunter/etc

set -- `getopt b:v:uf $*`
if [ $? != 0 ]
then
    cat <<EOF
update [-u] [-b dev|rel]
  -u              Forces a upgrade, will jump to a new versions.
  -b dev|rel      Selects a specific branch.
  -v <version>    Selects which version to install. Only valid for rel branch, implies -u!
  -f              Forces the update (no prompt for not supported SmartOS versions)
EOF
    exit 2
fi
case $(cat ${ETC}/chunter.version) in
    test-*)
        BRANCH=test
        ;;
    dev-*)
        BRANCH=dev
        ;;
    *)
        BRANCH=rel
        ;;
esac

for i in $*
do
    case $i in
        -b)
            BRANCH=$2; shift 2;;
        -v)
            TARGET_VER=$2; shift 2;;
        -u)
            UPGRADE=1; shift;;
        -f)
            FORCE=$1; shift;;
        --)
            shift; break;;
    esac
done

case $BRANCH in
    dev)
        if [ "x${TARGET_VER}x" != "xx" ]
        then
            echo "Error: -v is only supported for relase!"
        fi
        ;;
    rel)
        ;;
    *)
        echo "Error: Only dev and rel are supported as branches";
        exit 2;
esac

BASE=http://release.project-fifo.net/gz/${BRANCH}

CUR_VER=$(sed -e 's/\n//' ${ETC}/chunter.version)
CUR_BASE=$(echo "${CUR_VER}"  | sed -e 's/p.*$//')

LATEST_VER=$(sed -e 's/\n//' /tmp/chunter.version)


## If no target version is set and we do not upgrade then our
## target version is the same as the current base version.
if [ "x${TARGET_VER}x" = "xx" -a "${UPGRADE}" != "1" ]
then
    TARGET_VER="${CUR_BASE}"
fi

## If we are on the dev branch we need to update differenlty
if [ "${BRANCH}" = "dev" ]
then
    CHUNTER_VER="latest"
    ## We check if a target version is set either manually or implictly if so
    ## we use that version to see if ther is new data
elif [ "x${TARGET_VER}x" != "xx" ]
then
    CHUNTER_VER=$(curl -sL "${BASE}/index" | grep "^chunter-${TARGET_VER}" | sed -e 's/^chunter-//' | tail -n 1)
    if [ "x${CHUNTER_VER}x" = "xx" ]
    then
        echo "No package for version $TARGET_VER found."
        exit 1
    fi
    ## If no target version was set we expect a it to be a upgrade and upgade to
    ## latest.
elif [ "${UPGRADE}" = "1" ]
then
    CHUNTER_VER="latest"
else
    echo "Error: This should never happen!"
    exit 1
fi

FILE="chunter-${CHUNTER_VER}"

## Now we see if we need to download a new version
if [ "${BRANCH}" = "dev" ]
then
    curl -sL ${BASE}/chunter.version > /tmp/chunter.version
    if diff /tmp/chunter.version ${ETC}/chunter.version > /dev/null
    then
        echo "No update available."
        GET_UPDATE="false";
    else
        GET_UPDATE="true";
    fi
elif [ "${CUR_VER}" = "${CHUNTER_VER}" ]
then
    echo "No updates availalbe."
    GET_UPDATE="false";
else
    GET_UPDATE="true";
fi

if [ "${GET_UPDATE}" = "true" ]
then
    (
        cd /opt;
        curl -O ${BASE}/${FILE}.gz &&
            gunzip -f ${FILE}.gz &&
            sh ${FILE} ${FORCE} &&
            svcadm restart chunter &&
            echo "Chunter was updated" ||
                echo "Chunter update failed, sorry you will have to look into that." && exit 1
    )
fi
